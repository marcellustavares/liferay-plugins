/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.dynamicstorage.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.dynamicstorage.model.DynamicStorageAppEntity;
import com.liferay.portal.dynamicstorage.service.DynamicStorageAppEntityLocalService;
import com.liferay.portal.dynamicstorage.service.persistence.DynamicStorageAppEntityPersistence;
import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBFactoryUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.ClassNamePersistence;
import com.liferay.portal.service.persistence.UserPersistence;
import com.liferay.portal.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the dynamic storage app entity local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.portal.dynamicstorage.service.impl.DynamicStorageAppEntityLocalServiceImpl}.
 * </p>
 *
 * @author Marcellus Tavares
 * @see com.liferay.portal.dynamicstorage.service.impl.DynamicStorageAppEntityLocalServiceImpl
 * @see com.liferay.portal.dynamicstorage.service.DynamicStorageAppEntityLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class DynamicStorageAppEntityLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements DynamicStorageAppEntityLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.portal.dynamicstorage.service.DynamicStorageAppEntityLocalServiceUtil} to access the dynamic storage app entity local service.
	 */

	/**
	 * Adds the dynamic storage app entity to the database. Also notifies the appropriate model listeners.
	 *
	 * @param dynamicStorageAppEntity the dynamic storage app entity
	 * @return the dynamic storage app entity that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DynamicStorageAppEntity addDynamicStorageAppEntity(
		DynamicStorageAppEntity dynamicStorageAppEntity) {
		dynamicStorageAppEntity.setNew(true);

		return dynamicStorageAppEntityPersistence.update(dynamicStorageAppEntity);
	}

	/**
	 * Creates a new dynamic storage app entity with the primary key. Does not add the dynamic storage app entity to the database.
	 *
	 * @param appEntityId the primary key for the new dynamic storage app entity
	 * @return the new dynamic storage app entity
	 */
	@Override
	public DynamicStorageAppEntity createDynamicStorageAppEntity(
		long appEntityId) {
		return dynamicStorageAppEntityPersistence.create(appEntityId);
	}

	/**
	 * Deletes the dynamic storage app entity with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param appEntityId the primary key of the dynamic storage app entity
	 * @return the dynamic storage app entity that was removed
	 * @throws PortalException if a dynamic storage app entity with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DynamicStorageAppEntity deleteDynamicStorageAppEntity(
		long appEntityId) throws PortalException {
		return dynamicStorageAppEntityPersistence.remove(appEntityId);
	}

	/**
	 * Deletes the dynamic storage app entity from the database. Also notifies the appropriate model listeners.
	 *
	 * @param dynamicStorageAppEntity the dynamic storage app entity
	 * @return the dynamic storage app entity that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DynamicStorageAppEntity deleteDynamicStorageAppEntity(
		DynamicStorageAppEntity dynamicStorageAppEntity) {
		return dynamicStorageAppEntityPersistence.remove(dynamicStorageAppEntity);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(DynamicStorageAppEntity.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return dynamicStorageAppEntityPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.portal.dynamicstorage.model.impl.DynamicStorageAppEntityModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return dynamicStorageAppEntityPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.portal.dynamicstorage.model.impl.DynamicStorageAppEntityModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return dynamicStorageAppEntityPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return dynamicStorageAppEntityPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return dynamicStorageAppEntityPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public DynamicStorageAppEntity fetchDynamicStorageAppEntity(
		long appEntityId) {
		return dynamicStorageAppEntityPersistence.fetchByPrimaryKey(appEntityId);
	}

	/**
	 * Returns the dynamic storage app entity with the primary key.
	 *
	 * @param appEntityId the primary key of the dynamic storage app entity
	 * @return the dynamic storage app entity
	 * @throws PortalException if a dynamic storage app entity with the primary key could not be found
	 */
	@Override
	public DynamicStorageAppEntity getDynamicStorageAppEntity(long appEntityId)
		throws PortalException {
		return dynamicStorageAppEntityPersistence.findByPrimaryKey(appEntityId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(com.liferay.portal.dynamicstorage.service.DynamicStorageAppEntityLocalServiceUtil.getService());
		actionableDynamicQuery.setClass(DynamicStorageAppEntity.class);
		actionableDynamicQuery.setClassLoader(getClassLoader());

		actionableDynamicQuery.setPrimaryKeyPropertyName("appEntityId");

		return actionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(com.liferay.portal.dynamicstorage.service.DynamicStorageAppEntityLocalServiceUtil.getService());
		actionableDynamicQuery.setClass(DynamicStorageAppEntity.class);
		actionableDynamicQuery.setClassLoader(getClassLoader());

		actionableDynamicQuery.setPrimaryKeyPropertyName("appEntityId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return dynamicStorageAppEntityLocalService.deleteDynamicStorageAppEntity((DynamicStorageAppEntity)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return dynamicStorageAppEntityPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the dynamic storage app entities.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.portal.dynamicstorage.model.impl.DynamicStorageAppEntityModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of dynamic storage app entities
	 * @param end the upper bound of the range of dynamic storage app entities (not inclusive)
	 * @return the range of dynamic storage app entities
	 */
	@Override
	public List<DynamicStorageAppEntity> getDynamicStorageAppEntities(
		int start, int end) {
		return dynamicStorageAppEntityPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of dynamic storage app entities.
	 *
	 * @return the number of dynamic storage app entities
	 */
	@Override
	public int getDynamicStorageAppEntitiesCount() {
		return dynamicStorageAppEntityPersistence.countAll();
	}

	/**
	 * Updates the dynamic storage app entity in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param dynamicStorageAppEntity the dynamic storage app entity
	 * @return the dynamic storage app entity that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DynamicStorageAppEntity updateDynamicStorageAppEntity(
		DynamicStorageAppEntity dynamicStorageAppEntity) {
		return dynamicStorageAppEntityPersistence.update(dynamicStorageAppEntity);
	}

	/**
	 * Returns the dynamic storage app entity local service.
	 *
	 * @return the dynamic storage app entity local service
	 */
	public com.liferay.portal.dynamicstorage.service.DynamicStorageAppEntityLocalService getDynamicStorageAppEntityLocalService() {
		return dynamicStorageAppEntityLocalService;
	}

	/**
	 * Sets the dynamic storage app entity local service.
	 *
	 * @param dynamicStorageAppEntityLocalService the dynamic storage app entity local service
	 */
	public void setDynamicStorageAppEntityLocalService(
		com.liferay.portal.dynamicstorage.service.DynamicStorageAppEntityLocalService dynamicStorageAppEntityLocalService) {
		this.dynamicStorageAppEntityLocalService = dynamicStorageAppEntityLocalService;
	}

	/**
	 * Returns the dynamic storage app entity persistence.
	 *
	 * @return the dynamic storage app entity persistence
	 */
	public DynamicStorageAppEntityPersistence getDynamicStorageAppEntityPersistence() {
		return dynamicStorageAppEntityPersistence;
	}

	/**
	 * Sets the dynamic storage app entity persistence.
	 *
	 * @param dynamicStorageAppEntityPersistence the dynamic storage app entity persistence
	 */
	public void setDynamicStorageAppEntityPersistence(
		DynamicStorageAppEntityPersistence dynamicStorageAppEntityPersistence) {
		this.dynamicStorageAppEntityPersistence = dynamicStorageAppEntityPersistence;
	}

	/**
	 * Returns the dynamic storage persistence local service.
	 *
	 * @return the dynamic storage persistence local service
	 */
	public com.liferay.portal.dynamicstorage.service.DynamicStoragePersistenceLocalService getDynamicStoragePersistenceLocalService() {
		return dynamicStoragePersistenceLocalService;
	}

	/**
	 * Sets the dynamic storage persistence local service.
	 *
	 * @param dynamicStoragePersistenceLocalService the dynamic storage persistence local service
	 */
	public void setDynamicStoragePersistenceLocalService(
		com.liferay.portal.dynamicstorage.service.DynamicStoragePersistenceLocalService dynamicStoragePersistenceLocalService) {
		this.dynamicStoragePersistenceLocalService = dynamicStoragePersistenceLocalService;
	}

	/**
	 * Returns the dynamic storage persistence remote service.
	 *
	 * @return the dynamic storage persistence remote service
	 */
	public com.liferay.portal.dynamicstorage.service.DynamicStoragePersistenceService getDynamicStoragePersistenceService() {
		return dynamicStoragePersistenceService;
	}

	/**
	 * Sets the dynamic storage persistence remote service.
	 *
	 * @param dynamicStoragePersistenceService the dynamic storage persistence remote service
	 */
	public void setDynamicStoragePersistenceService(
		com.liferay.portal.dynamicstorage.service.DynamicStoragePersistenceService dynamicStoragePersistenceService) {
		this.dynamicStoragePersistenceService = dynamicStoragePersistenceService;
	}

	/**
	 * Returns the dynamic storage registry local service.
	 *
	 * @return the dynamic storage registry local service
	 */
	public com.liferay.portal.dynamicstorage.service.DynamicStorageRegistryLocalService getDynamicStorageRegistryLocalService() {
		return dynamicStorageRegistryLocalService;
	}

	/**
	 * Sets the dynamic storage registry local service.
	 *
	 * @param dynamicStorageRegistryLocalService the dynamic storage registry local service
	 */
	public void setDynamicStorageRegistryLocalService(
		com.liferay.portal.dynamicstorage.service.DynamicStorageRegistryLocalService dynamicStorageRegistryLocalService) {
		this.dynamicStorageRegistryLocalService = dynamicStorageRegistryLocalService;
	}

	/**
	 * Returns the dynamic storage registry remote service.
	 *
	 * @return the dynamic storage registry remote service
	 */
	public com.liferay.portal.dynamicstorage.service.DynamicStorageRegistryService getDynamicStorageRegistryService() {
		return dynamicStorageRegistryService;
	}

	/**
	 * Sets the dynamic storage registry remote service.
	 *
	 * @param dynamicStorageRegistryService the dynamic storage registry remote service
	 */
	public void setDynamicStorageRegistryService(
		com.liferay.portal.dynamicstorage.service.DynamicStorageRegistryService dynamicStorageRegistryService) {
		this.dynamicStorageRegistryService = dynamicStorageRegistryService;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name remote service.
	 *
	 * @return the class name remote service
	 */
	public com.liferay.portal.service.ClassNameService getClassNameService() {
		return classNameService;
	}

	/**
	 * Sets the class name remote service.
	 *
	 * @param classNameService the class name remote service
	 */
	public void setClassNameService(
		com.liferay.portal.service.ClassNameService classNameService) {
		this.classNameService = classNameService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.portal.dynamicstorage.model.DynamicStorageAppEntity",
			dynamicStorageAppEntityLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.portal.dynamicstorage.model.DynamicStorageAppEntity");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return DynamicStorageAppEntity.class;
	}

	protected String getModelClassName() {
		return DynamicStorageAppEntity.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = dynamicStorageAppEntityPersistence.getDataSource();

			DB db = DBFactoryUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.portal.dynamicstorage.service.DynamicStorageAppEntityLocalService.class)
	protected com.liferay.portal.dynamicstorage.service.DynamicStorageAppEntityLocalService dynamicStorageAppEntityLocalService;
	@BeanReference(type = DynamicStorageAppEntityPersistence.class)
	protected DynamicStorageAppEntityPersistence dynamicStorageAppEntityPersistence;
	@BeanReference(type = com.liferay.portal.dynamicstorage.service.DynamicStoragePersistenceLocalService.class)
	protected com.liferay.portal.dynamicstorage.service.DynamicStoragePersistenceLocalService dynamicStoragePersistenceLocalService;
	@BeanReference(type = com.liferay.portal.dynamicstorage.service.DynamicStoragePersistenceService.class)
	protected com.liferay.portal.dynamicstorage.service.DynamicStoragePersistenceService dynamicStoragePersistenceService;
	@BeanReference(type = com.liferay.portal.dynamicstorage.service.DynamicStorageRegistryLocalService.class)
	protected com.liferay.portal.dynamicstorage.service.DynamicStorageRegistryLocalService dynamicStorageRegistryLocalService;
	@BeanReference(type = com.liferay.portal.dynamicstorage.service.DynamicStorageRegistryService.class)
	protected com.liferay.portal.dynamicstorage.service.DynamicStorageRegistryService dynamicStorageRegistryService;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ClassNameLocalService.class)
	protected com.liferay.portal.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = com.liferay.portal.service.ClassNameService.class)
	protected com.liferay.portal.service.ClassNameService classNameService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private DynamicStorageAppEntityLocalServiceClpInvoker _clpInvoker = new DynamicStorageAppEntityLocalServiceClpInvoker();
}